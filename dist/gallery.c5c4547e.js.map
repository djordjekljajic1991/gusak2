{"version":3,"sources":["node_modules/regenerator-runtime/runtime.js","src/js/gallery.js"],"names":["modal","document","querySelector","closeModalBtn","overlay","btnCloseModal","btnsOpenModal","querySelectorAll","modalBlur","images","slides","btnLeft","btnRight","close","spinner","container","folderName","getElementById","textContent","replace","imgBox","src","slideNum","getImgUrl","Data","Object","values","split","urlData","keys","length","src2","src2x","innerHTML","markup","insertAdjacentHTML","imgTarget","loadImg","entries","observer","entry","isIntersecting","target","dataset","addEventListener","classList","remove","unobserve","imgObserver","IntersectionObserver","root","threshold","rootMargin","observe","openImg","forEach","item","i","e","openModal","add","closeModal","sliders","maxSlide","nextSlide","prevSlide","key","window","history","back"],"mappings":";AAAA;AACA,ACDA;ADEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,ACbA,IAAIA,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAZ;ADcA,ACbA,IAAMC,aAAa,GAAGF,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAtB;ADcA,ACbA,IAAME,OAAO,GAAGH,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAhB;ADcA,ACbA,IAAMG,aAAa,GAAGJ,QAAQ,CAACC,aAAT,CAAuB,cAAvB,CAAtB;ADcA,ACbA,IAAMI,aAAa,GAAGL,QAAQ,CAACM,gBAAT,CAA0B,iBAA1B,CAAtB;ADcA,ACbA,IAAMC,SAAS,GAAGP,QAAQ,CAACC,aAAT,CAAuB,kBAAvB,CAAlB;ADcA,ACbA,IAAMO,MAAM,GAAGR,QAAQ,CAACM,gBAAT,CAA0B,iBAA1B,CAAf;ADcA,ACbA,IAAMG,MAAM,GAAGT,QAAQ,CAACM,gBAAT,CAA0B,QAA1B,CAAf;ADcA,ACbA,IAAMI,OAAO,GAAGV,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,CAAhB;ADcA,ACbA,IAAMU,QAAQ,GAAGX,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,CAAjB;ADcA,ACbA,IAAMW,KAAK,GAAGZ,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAd;ADcA,ACbA,IAAMY,OAAO,GAAGb,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAhB;ADcA,ACZA,IAAMa,SAAS,GAAGd,QAAQ,CAACC,aAAT,CAAuB,qBAAvB,CAAlB;ADaA,ACZA,IAAIc,UAAU,GAAGf,QAAQ,CAACgB,cAAT,CAAwB,OAAxB,EAAiCC,WAAlD;ADaA,ACZAF,UAAU,GAAGA,UAAU,CAACG,OAAX,CAAmB,GAAnB,EAAwB,GAAxB,EAA6BA,OAA7B,CAAqC,GAArC,EAA0C,GAA1C,CAAb;ADaA,ACXA,IAAIC,MAAM,GAAGnB,QAAQ,CAACC,aAAT,CAAuB,mBAAvB,CAAb;ADYA,ACXA,IAAImB,GAAJ;ADYA,ACXA,IAAIC,QAAJ;ADYA;AACA,ACXA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAUD,QAAV,EAAoB;ADYtC,ECXE,IAAME,IAAI,GAAGC,MAAM,CAACC,MAAP,CAAcjB,MAAd,EAAsBa,QAAtB,EAAgCD,GAAhC,CAAoCM,KAApC,CAA0C,GAA1C,CAAb;ADYF,ECVE,IAAMC,OAAO,GAAGH,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoBC,MAAM,CAACI,IAAP,CAAYL,IAAZ,EAAkBM,MAAlB,GAA2B,CAA/C,EAAkDH,KAAlD,CAAwD,GAAxD,CAAhB;ADWF,ECTEN,GAAG,aAAMI,MAAM,CAACC,MAAP,CAAcE,OAAd,EAAuB,CAAC,CAAxB,CAAN,cACDH,MAAM,CAACC,MAAP,CAAcE,OAAd,EAAuBH,MAAM,CAACI,IAAP,CAAYD,OAAZ,EAAqBE,MAArB,GAA8B,CAArD,CADC,CAAH;ADUF,ECNE,IAAMC,IAAI,GAAGV,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAb;ADOF,ECNE,IAAMK,KAAK,aAAMD,IAAI,CAAC,CAAD,CAAV,iBAAoBA,IAAI,CAAC,CAAD,CAAxB,CAAX;ADOF,ECLEX,MAAM,CAACa,SAAP,GAAmB,GAAnB;ADMF,ECLE,IAAMC,MAAM,kGAGiBlB,UAHjB,cAG+BK,GAH/B,oDAIsBL,UAJtB,cAIoCgB,KAJpC,yBAAZ;ADMF,ECCEZ,MAAM,CAACe,kBAAP,CAA0B,YAA1B,EAAwCD,MAAxC;ADAF,ECEE,IAAME,SAAS,GAAGnC,QAAQ,CAACC,aAAT,CAAuB,eAAvB,CAAlB;ADDF;AACA,ECCE,IAAMmC,OAAO,GAAG,SAAVA,OAAU,CAAUC,OAAV,EAAmBC,QAAnB,EAA6B;ADA/C,ICCI,8BAAgBD,OAAhB;ADAJ,ICAI,IAAOE,KAAP;ADCJ;AACA,ICDI,IAAI,CAACA,KAAK,CAACC,cAAX,EAA2B;ADE/B,ICDID,KAAK,CAACE,MAAN,CAAarB,GAAb,GAAmBmB,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBtB,GAAxC;ADEJ,ICAImB,KAAK,CAACE,MAAN,CAAaE,gBAAb,CAA8B,MAA9B,EAAsC,YAAY;ADCtD,MCAMR,SAAS,CAACf,GAAV,GAAgBe,SAAS,CAACO,OAAV,CAAkBtB,GAAlC;ADCN,MCAMe,SAAS,CAACS,SAAV,CAAoBC,MAApB,CAA2B,UAA3B;ADCN,ICAK,CAHD;ADIJ,ICAIP,QAAQ,CAACQ,SAAT,CAAmBP,KAAK,CAACE,MAAzB;ADCJ,ECAG,CAVD;ADWF;AACA,ECDE,IAAMM,WAAW,GAAG,IAAIC,oBAAJ,CAAyBZ,OAAzB,EAAkC;ADExD,ICDIa,IAAI,EAAE,IAD8C;ADGxD,ICDIC,SAAS,EAAE,CAFyC;ADIxD,ICDIC,UAAU,EAAE;ADEhB,ECLwD,CAAlC,CAApB;ADMF,ECAEJ,WAAW,CAACK,OAAZ,CAAoBjB,SAApB;ADCF,ACAC,CAzCD;AD0CA;AACA,ACAA,IAAMkB,OAAO,GAAG,SAAVA,OAAU,GAAY;ADC5B,ECAE7C,MAAM,CAAC8C,OAAP,CAAe,UAACC,IAAD,EAAOC,CAAP,EAAa;ADC9B,ICAID,IAAI,CAACZ,gBAAL,CAAsB,OAAtB,EAA+B,UAAUc,CAAV,EAAa;ADChD,MCAMpC,QAAQ,GAAGmC,CAAX;ADCN,MCAMlC,SAAS,CAACD,QAAD,CAAT;ADCN,ICAK,CAHD;ADIJ,ECAG,CALD;ADMF,ACAC,CAPD;ADQA;AACA,ACAAgC,OAAO;ADCP;AACA,ACDA,IAAMK,SAAS,GAAG,SAAZA,SAAY,GAAY;ADE9B,ECDE3D,KAAK,CAAC6C,SAAN,CAAgBC,MAAhB,CAAuB,QAAvB;ADEF,ECDE1C,OAAO,CAACyC,SAAR,CAAkBC,MAAlB,CAAyB,QAAzB;ADEF,ECDEtC,SAAS,CAACqC,SAAV,CAAoBe,GAApB,CAAwB,MAAxB;ADEF,ACDC,CAJD;ADMA;AACA,ACDA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAY;ADE/B,ECDE7D,KAAK,CAAC6C,SAAN,CAAgBe,GAAhB,CAAoB,QAApB;ADEF,ECDExD,OAAO,CAACyC,SAAR,CAAkBe,GAAlB,CAAsB,QAAtB;ADEF,ECDEpD,SAAS,CAACqC,SAAV,CAAoBC,MAApB,CAA2B,MAA3B;ADEF,ACDC,CAJD;ADMA;AACA,ACDA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnD,aAAa,CAACwB,MAAlC,EAA0C2B,CAAC,EAA3C;ADEA,ECDEnD,aAAa,CAACmD,CAAD,CAAb,CAAiBb,gBAAjB,CAAkC,OAAlC,EAA2Ce,SAA3C;ADEF,ACHA;ADIA;AACA,ACFA1D,QAAQ,CAAC2C,gBAAT,CAA0B,SAA1B,EAAqC,UAAUc,CAAV,EAAa,CAChD;ADEF,ACDC,CAFD;ADIA,ACDAvD,aAAa,CAACyC,gBAAd,CAA+B,OAA/B,EAAwC,UAAUc,CAAV,EAAa;ADErD,ECDEG,UAAU;ADEZ,ACDC,CAFD;ADIA;AACA,ACFA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAY;ADG5B,ECFE,IAAMC,QAAQ,GAAGtD,MAAM,CAACqB,MAAxB;ADGF;AACA,ECFE,IAAMkC,SAAS,GAAG,SAAZA,SAAY,GAAY;ADGhC,ICFI,IAAI1C,QAAQ,KAAKyC,QAAQ,GAAG,CAA5B,EAA+BzC,QAAQ,GAAG,CAAX,CAA/B,KACKA,QAAQ;ADEjB,ICDIC,SAAS,CAACD,QAAD,CAAT;ADEJ,ECDG,CAJD;ADMF;AACA,ECFE,IAAM2C,SAAS,GAAG,SAAZA,SAAY,GAAY;ADGhC,ICFI,IAAI3C,QAAQ,KAAK,CAAjB,EAAoBA,QAAQ,GAAGyC,QAAQ,GAAG,CAAtB,CAApB,KACKzC,QAAQ;ADEjB,ICDIC,SAAS,CAACD,QAAD,CAAT;ADEJ,ECDG,CAJD,CAR0B,CAc1B;ADAF;AACA;AACA,ECAEV,QAAQ,CAACgC,gBAAT,CAA0B,OAA1B,EAAmCoB,SAAnC;ADCF,ECAErD,OAAO,CAACiC,gBAAR,CAAyB,OAAzB,EAAkCqB,SAAlC;ADCF,ECAEhE,QAAQ,CAAC2C,gBAAT,CAA0B,SAA1B,EAAqC,UAAUc,CAAV,EAAa;ADCpD,ICAI,IAAIA,CAAC,CAACQ,GAAF,KAAU,WAAd,EAA2BD,SAAS;ADCxC,ICAIP,CAAC,CAACQ,GAAF,KAAU,YAAV,IAA0BF,SAAS,EAAnC;ADCJ,ECAG,CAHD;ADIF,ACAC,CAtBD;ADuBA;AACA,ACDAF,OAAO;ADEP,ACAAK,MAAM,CAACvB,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;ADC5C,ECAE9B,OAAO,CAAC+B,SAAR,CAAkBe,GAAlB,CAAsB,QAAtB;ADCF,ECAE7C,SAAS,CAAC8B,SAAV,CAAoBC,MAApB,CAA2B,QAA3B;ADCF,ACAC,CAHD;ADIA,ACAAjC,KAAK,CAAC+B,gBAAN,CAAuB,OAAvB,EAAgC,YAAY;ADC5C,ECAEwB,OAAO,CAACC,IAAR;ADCF,ACAC,CAFD;ADGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"gallery.c5c4547e.js","sourceRoot":"..","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","import { async } from \"regenerator-runtime\";\n\nlet modal = document.querySelector(\".modal\");\nconst closeModalBtn = document.querySelector(\".modal-close\");\nconst overlay = document.querySelector(\".overlay\");\nconst btnCloseModal = document.querySelector(\".close-modal\");\nconst btnsOpenModal = document.querySelectorAll(\".gallery__image\");\nconst modalBlur = document.querySelector(\".gallery-gallery\");\nconst images = document.querySelectorAll(\".gallery__image\");\nconst slides = document.querySelectorAll(\".slide\");\nconst btnLeft = document.querySelector(\".slider__btn--left\");\nconst btnRight = document.querySelector(\".slider__btn--right\");\nconst close = document.querySelector(\".close\");\nconst spinner = document.querySelector(\".spinner\");\n\nconst container = document.querySelector(\".gallery__container\");\nlet folderName = document.getElementById(\"icona\").textContent;\nfolderName = folderName.replace(\" \", \"-\").replace(\" \", \"-\");\n\nlet imgBox = document.querySelector(\".modal__image-box\");\nlet src;\nlet slideNum;\n\nconst getImgUrl = function (slideNum) {\n  const Data = Object.values(images)[slideNum].src.split(\"/\");\n\n  const urlData = Object.values(Data)[Object.keys(Data).length - 1].split(\".\");\n\n  src = `${Object.values(urlData)[-0]}.${\n    Object.values(urlData)[Object.keys(urlData).length - 1]\n  }`;\n\n  const src2 = src.split(\".\");\n  const src2x = `${src2[0]}@2x.${src2[1]}`;\n\n  imgBox.innerHTML = \" \";\n  const markup = `\n      <img\n        class=\"modal-image lazy-img \"\n        src=\"/src/img/galery/${folderName}/${src}\"\n        data-src=\"/src/img/galery/${folderName}/${src2x}\"\n      />\n      `;\n  imgBox.insertAdjacentHTML(\"afterbegin\", markup);\n\n  const imgTarget = document.querySelector(\"img[data-src]\");\n  const loadImg = function (entries, observer) {\n    const [entry] = entries;\n    if (!entry.isIntersecting) return;\n    entry.target.src = entry.target.dataset.src;\n\n    entry.target.addEventListener(\"load\", function () {\n      imgTarget.src = imgTarget.dataset.src;\n      imgTarget.classList.remove(\"lazy-img\");\n    });\n    observer.unobserve(entry.target);\n  };\n  const imgObserver = new IntersectionObserver(loadImg, {\n    root: null,\n    threshold: 0,\n    rootMargin: \"200px\",\n  });\n\n  imgObserver.observe(imgTarget);\n};\n\nconst openImg = function () {\n  images.forEach((item, i) => {\n    item.addEventListener(\"click\", function (e) {\n      slideNum = i;\n      getImgUrl(slideNum);\n    });\n  });\n};\n\nopenImg();\nconst openModal = function () {\n  modal.classList.remove(\"hidden\");\n  overlay.classList.remove(\"hidden\");\n  modalBlur.classList.add(\"blur\");\n};\n\nconst closeModal = function () {\n  modal.classList.add(\"hidden\");\n  overlay.classList.add(\"hidden\");\n  modalBlur.classList.remove(\"blur\");\n};\n\nfor (let i = 0; i < btnsOpenModal.length; i++)\n  btnsOpenModal[i].addEventListener(\"click\", openModal);\n\ndocument.addEventListener(\"keydown\", function (e) {\n  // console.log(e.key);\n});\ncloseModalBtn.addEventListener(\"click\", function (e) {\n  closeModal();\n});\nconst sliders = function () {\n  const maxSlide = images.length;\n\n  const nextSlide = function () {\n    if (slideNum === maxSlide - 1) slideNum = 0;\n    else slideNum++;\n    getImgUrl(slideNum);\n  };\n  const prevSlide = function () {\n    if (slideNum === 0) slideNum = maxSlide - 1;\n    else slideNum--;\n    getImgUrl(slideNum);\n  };\n\n  //event handlers\n\n  btnRight.addEventListener(\"click\", nextSlide);\n  btnLeft.addEventListener(\"click\", prevSlide);\n  document.addEventListener(\"keydown\", function (e) {\n    if (e.key === \"ArrowLeft\") prevSlide();\n    e.key === \"ArrowRight\" && nextSlide();\n  });\n};\nsliders();\n\nwindow.addEventListener(\"load\", function () {\n  spinner.classList.add(\"hidden\");\n  container.classList.remove(\"hidden\");\n});\nclose.addEventListener(\"click\", function () {\n  history.back();\n});\n"]}